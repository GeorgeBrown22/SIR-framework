format long
clearvars

%Initialising the data for each real estate company
Evergrande=readmatrix("values2.xlsx","Sheet","3333.HK");
Country_Garden=readmatrix("values2.xlsx","Sheet","2007.HK");
Vanke=readmatrix("values2.xlsx","Sheet","2202.HK");
Sunac=readmatrix("values2.xlsx","Sheet","1516.HK");
China_Overseas=readmatrix("values2.xlsx","Sheet","0688.HK");
Poly=readmatrix("values2.xlsx","Sheet","0119.HK");
Longfor=readmatrix("values2.xlsx","Sheet","0960.HK");
Seazen=readmatrix("values2.xlsx","Sheet","1030.HK");
China_Resources=readmatrix("values2.xlsx","Sheet","1109.HK");
Randf=readmatrix("values2.xlsx","Sheet","2777.HK");

%Initialising the initial values for the forecast
pred=zeros(252,10);
pred(1,1)=Evergrande(986,5);
pred(1,2)=Country_Garden(986,5);
pred(1,3)=Vanke(986,5);
pred(1,4)=Sunac(193,5);
pred(1,5)=China_Overseas(986,5);
pred(1,6)=Poly(986,5);
pred(1,7)=Longfor(986,5);
pred(1,8)=Seazen(986,5);
pred(1,9)=China_Resources(986,5);
pred(1,10)=Randf(986,5);

%Initialising a single matrix for all stock price values
fin_mat=zeros(986,10);
fin_mat(1:986,1)=Evergrande(1:986,5);
fin_mat(1:986,2)=Country_Garden(1:986,5);
fin_mat(1:986,3)=Vanke(1:986,5);
fin_mat(794:986,4)=Sunac(1:193,5);
fin_mat(1:813,4)=Sunac(1,5);
fin_mat(1:986,5)=China_Overseas(1:986,5);
fin_mat(1:986,6)=Poly(1:986,5);
fin_mat(1:986,7)=Longfor(1:986,5);
fin_mat(1:986,8)=Seazen(1:986,5);
fin_mat(1:986,9)=China_Resources(1:986,5);
fin_mat(1:986,10)=Randf(1:986,5);

%Initialising the adjacency matrix
adj=zeros(10,10);

for i=1:10
    for j=1:10
        alpha=corrcoef(fin_mat(1:986,i),fin_mat(1:986,j));
        adj(i,j)=alpha(1,2);
    end
end
for i=1:3
    alpha=corrcoef(fin_mat(794:986,4),fin_mat(794:986,i));
    adj(4,i)=alpha(1,2);
    adj(i,4)=alpha(1,2);
end
for i=5:10
    alpha=corrcoef(fin_mat(794:986,4),fin_mat(794:986,i));
    adj(4,i)=alpha(1,2);
    adj(i,4)=alpha(1,2);
end

% Initialising strictly positive adjacency matrix
pos_adj=adj;
for i=1:10
    for j=1:10
        %ensure no negative probabilities
        pos_adj(i,j)=(adj(i,j)+1)*0.5;
    end
end

%% Section for lack of adjacency for ss3
independency=zeros(10,1);
for i=1:10
    independency(i)=sum(abs(adj(1:10,i)))-1;
end
ind_std=std(independency(1:10));
ind_mean=mean(independency(1:10));

% Initialising simulation plots
sim_study_1=zeros(25200,30);
sim_study_2=zeros(25200,40);
sim_study_3=zeros(25200,40);

pred_plot=zeros(25200,10);
count=1;

count=1;
%% Simulations
for g=1:100
    inf_vec=[1;0;0;0;0;0;0;0;0;0;];
    S=zeros(252,1);
    I=zeros(252,1);
    R=zeros(252,1);
    D=zeros(252,1);
    I(1)=sum(inf_vec,'all');
    R(1)=0;
    S(1)=10-I(1)-R(1);
    D(1)=0;

    rec_vec=zeros(10,1);
    dec_vec=zeros(10,1);    
    inf_adj=zeros(10,1);

    %======================================================================
    %% Forecast
    for t=1:251
         %% Infection
        % calculate infected probabilities unaffected by if its already infected
        inf_prob=pos_adj*inf_vec;
        for i=1:10
            if inf_vec(i)==1
                inf_prob(i)=inf_prob(i)-1;
            end
        end
        % scale them to [0,1]
        lambda=1/sum(inf_vec(1:10));
        inf_prob=inf_prob*lambda;
        % extract random number from standard normal dist between [0,2]
        for i=1:10
            x=(rand)*3;
            if inf_vec(i)==0
                if inf_prob(i)>=x
                    inf_vec(i)=1;
                end
                if inf_prob(i)<x
                    inf_vec(i)=0;
                end  
            end
        end

        %==================================================================
        %% Recovery

        % Recovery probability for ss1 and ss2
        rec_prob=(pos_adj*(inf_vec-rec_vec));

        for i=1:10
            if inf_vec(i)==0
                rec_prob(i)=0;
            end
        end
      
        rec_prob=rec_prob*0.1;

        for i=1:10
            y=(rand)*3;
            if rec_prob(i)>=y
                rec_prob(i)=1;
            end
            if rec_prob(i)<y
                rec_prob(i)=0;
            end
            if rec_vec(i)==0
                rec_vec(i)=rec_prob(i);
            end
        end
        inf=inf_vec-rec_vec-dec_vec;
        rec=sum(rec_vec)-sum(dec_vec);
        if rec<0
            rec=0;
        end
        %==================================================================
        %% Results
        I(t+1) = sum(inf);
        S(t+1) = 10 - sum(inf_vec);
        R(t+1) = rec;
        D(t+1) = sum(dec_vec);

        for i=1:10
            sim_study_1(count+1,i)=1-inf_vec(i);
            sim_study_1(count+1,i+10)=inf_vec(i)-rec_vec(i);
            sim_study_1(count+1,i+20)=rec_vec(i);
        end
        count=count+1;
    end
    count=count+1;
end


for n=0:99
    sim_study_1((252*(n))+1,1:10)=[0;1;1;1;1;1;1;1;1;1;];
    sim_study_1((252*(n))+1,11:20)=[1;0;0;0;0;0;0;0;0;0;];
    sim_study_1((252*(n))+1,21:30)=[0;0;0;0;0;0;0;0;0;0;];
end
sim_study_1_results=zeros(260,30);
for i=1:252
    for j=1:30
         for k=0:99
            sim_study_1_results(i,j)=sim_study_1_results(i,j)+sim_study_1(i+(252*k),j);
         end
    end
end
sim_study_1_susceptible=zeros(252,1);
sim_study_1_infected=zeros(252,1);
sim_study_1_recovered=zeros(252,1);

for i=1:252
    sim_study_1_susceptible(i)=sum(sim_study_1_results(i,1:10))*0.01;
    sim_study_1_infected(i)=sum(sim_study_1_results(i,11:20))*0.01;
    sim_study_1_recovered(i)=sum(sim_study_1_results(i,21:30))*0.01;
end

%% confidence intervals
conf_ints=zeros(25200,4);
for i=1:25200
    conf_ints(i,1)=sum(sim_study_1(i,1:10));
    conf_ints(i,2)=sum(sim_study_1(i,11:20));
    conf_ints(i,3)=sum(sim_study_1(i,21:30));
    conf_ints(i,4)=sum(conf_ints(i,1:3));
end

conf_ints_means=zeros(252,3);
for i=1:3
    for j=1:252
        conf_ints_means(j,i)=sum(conf_ints(j:252:j+24948,i))*(1/100);
    end
end
std_conf=zeros(252,3);
fin_conf_int=zeros(252,6);
for i=1:252
    for j=1:3
        std_conf(i,j)=std(conf_ints(i:252:i+24948,j));
        fin_conf_int(i,j)=conf_ints_means(i,j)+1.96*(std_conf(i,j))*0.1;
        fin_conf_int(i,j+3)=conf_ints_means(i,j)-1.96*(std_conf(i,j))*0.1;
    end
end
sus_conf_plus=zeros(1,252);
sus_conf_minus=zeros(1,252);
inf_conf_plus=zeros(1,252);
inf_conf_minus=zeros(1,252);
rec_conf_plus=zeros(1,252);
rec_conf_minus=zeros(1,252);
for i=1:252
    sus_conf_plus(i)=fin_conf_int(i,1);
    sus_conf_minus(i)=fin_conf_int(i,4);
    inf_conf_plus(i)=fin_conf_int(i,2);
    inf_conf_minus(i)=fin_conf_int(i,5);
    rec_conf_plus(i)=fin_conf_int(i,3);
    rec_conf_minus(i)=fin_conf_int(i,6);

end

t=1:252;
figure(1)
plot(t,sim_study_1_susceptible,'r',t,sim_study_1_infected,'g',t,sim_study_1_recovered,'b','Linewidth',1.5);

figure(2)
t=1:252;
greycolour=[.8,.8,.8];
plot(t,sim_study_1_susceptible,'r', 'Linewidth', 1.5)
hold on
plot(t,sim_study_1_infected,'g', 'Linewidth',1.5)
plot(t,sim_study_1_recovered,'b', 'Linewidth',1.5)
patch([t fliplr(t)], [sus_conf_plus fliplr(sus_conf_minus)], greycolour, 'FaceAlpha',0.5, 'EdgeColor','none')
patch([t fliplr(t)], [inf_conf_plus fliplr(inf_conf_minus)], greycolour, 'FaceAlpha',0.5, 'EdgeColor','none')
patch([t fliplr(t)], [rec_conf_plus fliplr(rec_conf_minus)], greycolour, 'FaceAlpha',0.5, 'EdgeColor','none')
legend('Susceptible','Infected','Recovered')
title("Mean average forecast of the S-I-R model")
hold off
        



